{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","app/app-reducer.ts","utils/error-utils.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","initialState","status","error","setAppStatusAC","type","setAppErrorAC","handleServerNetworkError","dispatch","message","handleServerAppError","data","messages","length","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","updateTaskAC","catch","err","console","warn","AddItemForm","React","memo","props","log","useState","setTitle","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","disabled","entityStatus","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","useDispatch","useEffect","thunk","action","setTasksAC","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","removeTaskAC","removeTaskTC","item","addTaskAC","addTaskTC","changeStatus","newTitle","emtityStatus","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","todolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d726abae.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'abbdd15d-25c5-489b-bf41-880fe8431dc9'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n//если статус loading- крутилка показывается, а если все остальные, то крутилка прячется\r\n\r\nconst initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null as string | null\r\n}\r\n\r\n\r\nexport type setStatusActionType= ReturnType<typeof setAppStatusAC>\r\nexport type setErrorActionType= ReturnType<typeof setAppErrorAC>\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionsType = setStatusActionType | setErrorActionType\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType)=> ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: string | null)=> ({type: 'APP/SET-ERROR', error} as const)","import {setAppErrorAC, setAppStatusAC, setErrorActionType, setStatusActionType} from \"../app/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ResponseType} from '../api/todolists-api';\r\n\r\nexport const handleServerNetworkError= (dispatch: Dispatch<ServerErrorActionsType>, message: string)=> {\r\n    dispatch(setAppErrorAC(message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerAppError=<T>(dispatch: Dispatch<ServerErrorActionsType>, data: ResponseType<T>)=>{\r\n        if (data.messages.length) {\r\n            dispatch(setAppErrorAC(data.messages[0]))\r\n        } else {\r\n            dispatch(setAppErrorAC('ERROR'))\r\n        }\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n\r\n\r\n\r\n\r\ntype ServerErrorActionsType= setStatusActionType | setErrorActionType","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {\r\n    RequestStatusType,\r\n    setAppStatusAC,\r\n    setErrorActionType,\r\n    setStatusActionType\r\n} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.emtityStatus} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\n\r\n\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\nexport const changeTodolistEntityStatusAC = (id: string, emtityStatus: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    id,\r\n    emtityStatus\r\n} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTodolistAC(todolistId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(dispatch, res.data)\r\n                }\r\n            })\r\n\r\n            .catch((err: AxiosError) => {\r\n                handleServerNetworkError(dispatch, err.message)\r\n            })\r\n    }\r\n}\r\n\r\n/*\r\nenum ResponseStatuse {\r\n    sucsess = 0,\r\n    error = 1,\r\n    captcha = 10\r\n}*/\r\n\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC(res.data.data.item))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(dispatch, res.data)\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                handleServerNetworkError(dispatch, err.message)\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTodolistTitleAC(id, title))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(dispatch, res.data)\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                handleServerNetworkError(dispatch, err.message)\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type changeTodolistEntityStatusActionType = ReturnType<typeof changeTodolistEntityStatusAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | setStatusActionType\r\n    | setErrorActionType\r\n    | changeTodolistEntityStatusActionType\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppStatusAC, setErrorActionType, setStatusActionType} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            const action = setTasksAC(tasks, todolistId)\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTaskAC(taskId, todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n}\r\n\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(dispatch, res.data)\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                handleServerNetworkError(dispatch, err.message)\r\n            })\r\n}\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | setStatusActionType\r\n    | setErrorActionType\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    entityStatus?: RequestStatusType\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={props.entityStatus === 'loading'}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={props.entityStatus === 'loading'}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    entityStatus?: RequestStatusType\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} entityStatus={props.entityStatus}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist} />\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                id={tl.id}\r\n                                title={tl.title}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                filter={tl.filter}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                entityStatus={tl.entityStatus}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n   // const [open, setOpen] = React.useState(true)\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        //setOpen(false\r\n       dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './App.css'\r\nimport {AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\n\r\nfunction App() {\r\nconst status= useSelector<AppRootStateType, RequestStatusType>(state=> state.app.status)\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n            <Container fixed>\r\n                <TodolistsList/>\r\n            </Container>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}