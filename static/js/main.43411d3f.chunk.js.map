{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","state/Task.tsx","TodoList.tsx","state/todoLists-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","onClick","color","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","changeTitle","onDoubleClick","Task","task","changeTaskStatus","changeTaskTitle","removeTask","id","className","isDone","Checkbox","checked","newIsDoneValue","newValue","Delete","TodoList","useCallback","Id","tasks","todoListFilter","filter","t","getTasksForTodoList","map","addTask","removeTodoList","changeTodoListTitle","setAllFilterValue","changeTodoListFilter","setActiveFilterValue","setCompletedFilterValue","style","listStyle","padding","marginTop","Button","marginRight","size","initialState","AppWithRedux","todolists","useSelector","state","dispatch","useDispatch","taskID","todoListId","action","type","taskId","todolistId","addTaskAC","changeTaskTitleAC","todoListID","changeTodoListTitleAC","newFilterValue","changeTodoListFilterAC","addTodoList","v1","AddTodoListAC","todoListComponents","tl","Grid","item","Paper","elevation","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","container","spacing","rootReducer","combineReducers","copyState","newTask","updatedTasks","updatedTasksStatus","newTodoList","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"0QAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCTOC,EAAaC,IAAMC,MAAK,SAACC,GAClCC,QAAQC,IAAI,iBADqD,MAEvCC,mBAAiB,IAFsB,mBAE1DC,EAF0D,KAEnDC,EAFmD,OAGvCF,mBAAwB,MAHe,mBAG1DG,EAH0D,KAGnDC,EAHmD,KAgB3DC,EAAU,WACZ,IAAMC,EAAeL,EAAMM,OACvBD,EACAT,EAAMQ,QAAQC,GAEdF,EAAS,sBAEbF,EAAS,KAGb,OACI,6BACI,kBAACM,EAAA,EAAD,CACIC,QAAS,WACFC,MAAOT,EACPU,SA1BC,SAACC,GACjBR,EAAS,MACTF,EAASU,EAAEC,cAAcH,QAyBVI,WAvBO,SAACF,GACvBT,GAASC,EAAS,MACJ,UAAVQ,EAAEG,KACFV,KAqBWW,MAAOnB,EAAMmB,MACbb,QAASA,EACTc,WAAYd,IACvB,kBAACe,EAAA,EAAD,CAAYC,QAASd,EAASe,MAAO,WACjC,kBAACC,EAAA,EAAD,WCCDC,EArCK3B,IAAMC,MAAK,SAACC,GAC5BC,QAAQC,IAAI,gBAD+C,MAE3BC,oBAAkB,GAFS,mBAEpDuB,EAFoD,KAE1CC,EAF0C,OAGjCxB,mBAAiB,IAHgB,mBAGpDC,EAHoD,KAG7CC,EAH6C,OAIjCF,oBAAkB,GAJe,mBAI7CI,GAJ6C,WA0B3D,OACImB,EAAW,kBAACf,EAAA,EAAD,CAAWE,MAAOT,EACPU,SATN,SAACC,GACjBV,EAASU,EAAEC,cAAcH,OACpBE,EAAEC,cAAcH,MAAMH,QACvBH,GAAS,IAOSqB,WAAS,EACTC,OAlBN,WAChB,IAAMpB,EAAeL,EAAMM,OAC3BiB,GAAY,GACRlB,GACAT,EAAM8B,YAAY1B,IAeAmB,MAAO,UACPX,QAAS,aACtB,0BAAMmB,cA3BA,WACfxB,GAAS,GACTF,EAASL,EAAMI,OACfuB,GAAY,KAwBH,IAAmC3B,EAAMI,MAAzC,Q,2BCGF4B,EA/BHlC,IAAMC,MAAK,YAKqB,IAJhBkC,EAIe,EAJfA,KACAC,EAGe,EAHfA,iBACAC,EAEe,EAFfA,gBACAC,EACe,EADfA,WAExBnC,QAAQC,IAAI,QAUZ,OACI,yBAAKgB,IAAKe,EAAKI,GAAIC,UAAWL,EAAKM,OAAS,UAAY,IACpD,kBAACC,EAAA,EAAD,CAAUjB,MAAO,UACPkB,QAASR,EAAKM,OACdzB,SAVM,SAACC,GACrB,IAAI2B,EAAgB3B,EAAEC,cAAcyB,QACpCP,EAAiBD,EAAKI,GAAIK,MAStB,kBAAC,EAAD,CAActC,MAAO6B,EAAK7B,MAAO0B,YAPb,SAACa,GAAD,OAAsBR,EAAgBF,EAAKI,GAAIM,MAQnE,kBAACtB,EAAA,EAAD,CAAYC,QAdG,kBAAMc,EAAWH,EAAKI,MAejC,kBAACO,EAAA,EAAD,WC4DDC,EA3EC/C,IAAMC,MAAK,SAACC,GAYxB,IAAMoC,EAAaU,uBAAY,SAACT,GAAD,OAAgBrC,EAAMoC,WAAWC,EAAIrC,EAAM+C,MAAI,CAAC/C,EAAMoC,WAAYpC,EAAM+C,KACjGb,EAAmBY,uBAAY,SAACT,EAAYK,GAAb,OAAyC1C,EAAMkC,iBAAiBG,EAAIK,EAAgB1C,EAAM+C,MAAI,CAAC/C,EAAMkC,iBAAkBlC,EAAM+C,KAC5JZ,EAAiBW,uBAAY,SAACT,EAAYM,GAAb,OAAkC3C,EAAMmC,gBAAgBE,EAAIM,EAAU3C,EAAM+C,MAAI,CAAE/C,EAAMmC,gBAAiBnC,EAAM+C,KAE5IC,EAfN,WACI,OAAQhD,EAAMiD,gBACV,IAAK,SACD,OAAOjD,EAAMgD,MAAME,QAAO,SAAAC,GAAC,OAAKA,EAAEZ,UACtC,IAAK,YACD,OAAOvC,EAAMgD,MAAME,QAAO,SAAAC,GAAC,OAAIA,EAAEZ,UACrC,QACI,OAAOvC,EAAMgD,OAQXI,GAAsBC,KAAI,SAAAF,GACpC,OACI,kBAAC,EAAD,CACIjC,IAAKiC,EAAEd,GACPJ,KAAMkB,EACNf,WAAYA,EACZF,iBAAkBA,EAClBC,gBAAiBA,OAKvBmB,EAAUR,uBAAY,SAAC1C,GACzBJ,EAAMsD,QAAQlD,EAAOJ,EAAM+C,MAC5B,CAAC/C,EAAMsD,QAAStD,EAAM+C,KAEnBQ,EAAiBT,uBAAa,WAChC9C,EAAMuD,eAAevD,EAAM+C,MAC5B,CAAC/C,EAAMuD,eAAgBvD,EAAM+C,KAE1BS,EAAqBV,uBAAY,SAAC1C,GAAD,OAAmBJ,EAAMwD,oBAAoBpD,EAAOJ,EAAM+C,MAAI,CAAC/C,EAAMwD,oBAAqBxD,EAAM+C,KAGjIU,EAAoBX,uBAAY,kBAAM9C,EAAM0D,qBAAqB,MAAO1D,EAAM+C,MAAK,CAAC/C,EAAM0D,qBAAsB1D,EAAM+C,KACtHY,EAAuBb,uBAAY,kBAAM9C,EAAM0D,qBAAqB,SAAU1D,EAAM+C,MAAK,CAAC/C,EAAM0D,qBAAsB1D,EAAM+C,KAC5Ha,EAA0Bd,uBAAY,kBAAM9C,EAAM0D,qBAAqB,YAAa1D,EAAM+C,MAAK,CAAC/C,EAAM0D,qBAAsB1D,EAAM+C,KAExI,OACI,6BACI,4BACI,kBAAC,EAAD,CAAc3C,MAAOJ,EAAMI,MAAO0B,YAAa0B,IAC/C,kBAACnC,EAAA,EAAD,CAAYC,QAASiC,GACjB,kBAACX,EAAA,EAAD,QAGR,kBAAC/C,EAAD,CAAasB,MAAO,kBAAmBX,QAAS8C,IAChD,yBAAKO,MAAO,CAACC,UAAW,OAAQC,QAAS,QACpCf,GAEL,yBAAKa,MAAO,CAACG,UAAW,QACpB,kBAACC,EAAA,EAAD,CAAQJ,MAAO,CAACK,YAAa,OACrBC,KAAM,QAAS5C,MAAO,UACtBX,QAAkC,QAAzBZ,EAAMiD,eAA2B,WAAa,YACvD3B,QAASmC,GAHjB,OAKA,kBAACQ,EAAA,EAAD,CAAQJ,MAAO,CAACK,YAAa,OACrBC,KAAM,QAAS5C,MAAO,UACtBX,QAAkC,WAAzBZ,EAAMiD,eAA8B,WAAa,YAC1D3B,QAASqC,GAHjB,UAKA,kBAACM,EAAA,EAAD,CAAQE,KAAM,QAAS5C,MAAO,UACtBX,QAAkC,cAAzBZ,EAAMiD,eAAiC,WAAa,YAC7D3B,QAASsC,GAFjB,kB,uFCjEVQ,EAA+B,G,QCM/BA,EAA+B,G,QCiKtBC,MA7Jf,WAMI,IAAIC,EAAYC,aACZ,SAAAC,GAAK,OAAIA,EAAMF,aAEftB,EAAQuB,aACR,SAAAC,GAAK,OAAIA,EAAMxB,SAEfyB,EAAWC,cAoBTtC,EAAYU,uBAAY,SAAC6B,EAAgBC,GAM3C,IAAIC,EDaD,CAACC,KAAM,cAAeC,OCbEJ,EDacK,WCbNJ,GACnCH,EAASI,KACX,CAACJ,IAEGnB,EAAQR,uBAAY,SAAC1C,EAAewE,GAWtC,IAAIC,EDCa,SAACzE,EAAe4E,GACrC,MAAO,CAACF,KAAM,WAAYE,WAAYA,EAAY5E,MAAOA,GCFxC6E,CAAU7E,EAAOwE,GAC9BH,EAASI,KACV,CAACJ,IAEEvC,EAAkBY,uBAAY,SAAC6B,EAAgBjC,EAAyBkC,GAM1E,IAAIC,EDJD,CAACC,KAAM,qBAAsBE,WCIwBJ,EDJAvC,GCIxBsC,EDJgCpC,OCIxBG,GACxC+B,EAASI,KACX,CAACJ,IAEGtC,EAAiBW,uBAAY,SAAC6B,EAAgBvE,EAAewE,GAM/D,IAAIC,EDXqB,SAACzE,EAAeiC,EAAY2C,GACzD,MAAO,CAACF,KAAM,oBAAqBE,WAAYA,EAAY5E,MAAOA,EAAOiC,GAAIA,GCU5D6C,CAAkBP,EAAQvE,EAAOwE,GAC9CH,EAASI,KACV,CAACJ,IAEEjB,EAAqBV,uBAAY,SAAC1C,EAAe+E,GAGnD,IAAIN,EFrDyB,SAACzE,EAAeiC,GACjD,MAAO,CACHyC,KAAM,wBACN1E,MAAOA,EACP+E,WAAY9C,GEiDC+C,CAAsBhF,EAAO+E,GAC1CV,EAASI,KACV,CAACJ,IAEEf,EAAsBZ,uBAAY,SAACuC,EAAkCT,GAGvE,IAAIC,EFpD0B,SAACQ,EAAkChD,GACrE,MAAO,CACHyC,KAAM,yBACNO,eAAgBA,EAChBT,WAAYvC,GEgDCiD,CAAuBD,EAAgBT,GACpDH,EAASI,KACV,CAACJ,IAEElB,EAAgBT,uBAAY,SAAC8B,GAI/B,IAAIC,EFlFD,CACHC,KAAM,kBACNF,WEgF8BA,GAC9BH,EAASI,KACV,CAACJ,IAEEc,EAAazC,uBAAY,SAAC1C,GAQ5B,IAAIyE,EFxFiB,SAACzE,GAC1B,MAAO,CACH0E,KAAM,eACN1E,MAAOA,EACPiC,GAAImD,eEoFSC,CAAcrF,GAC3BqE,EAASI,KACV,CAACJ,IAEEiB,EAAqBpB,EAAUjB,KAAI,SAACsC,GACtC,OACI,kBAACC,EAAA,EAAD,CAAMC,MAAM,EAAM3E,IAAKyE,EAAGtD,IACtB,kBAACyD,EAAA,EAAD,CAAOC,UAAW,EAAGlC,MAAO,CAACE,QAAS,SAClC,kBAAC,EAAD,CACI3D,MAAOuF,EAAGvF,MACV4C,MAAOA,EAAM2C,EAAGtD,IAChBD,WAAYA,EACZsB,qBAAsBA,EACtBJ,QAASA,EACTL,eAAgB0C,EAAGzC,OACnBhB,iBAAkBA,EAClBa,GAAI4C,EAAGtD,GACPkB,eAAgBA,EAChBC,oBAAqBA,EACrBrB,gBAAiBA,SAMrC,OACI,yBAAKG,UAAU,OACX,kBAAC0D,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,CAASrC,MAAO,CAACsC,eAAgB,kBAC7B,kBAAC9E,EAAA,EAAD,CAAY+E,KAAK,QAAQ7E,MAAM,UAAU8E,aAAW,QAChD,kBAACC,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAY3F,QAAQ,MAApB,aAGA,kBAACqD,EAAA,EAAD,CAAQrD,QAAS,WAAYW,MAAM,WAAnC,WAGR,kBAACiF,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACb,EAAA,EAAD,CAAMc,WAAW,EAAM7C,MAAO,CAACE,QAAS,aACpC,kBAAClE,EAAD,CAAasB,MAAO,2BAA4BX,QAAS+E,KAE7D,kBAACK,EAAA,EAAD,CAAMc,WAAW,EAAMC,QAAS,GAC3BjB,M,QClLfkB,EAAcC,YAAgB,CAChC7D,MF4BwB,WAAgE,IAA/DwB,EAA8D,uDAAtDJ,EAAcS,EAAwC,uCAEvF,OAAQA,EAAOC,MACX,IAAK,cACD,IAAIgC,EAAS,eAAOtC,GAGpB,OAFAsC,EAAUjC,EAAOG,YAAc8B,EAAUjC,EAAOG,YAAY9B,QAAO,SAAAC,GAAC,OAAIA,EAAEd,KAAOwC,EAAOE,UAEjF+B,EACX,IAAK,WACD,IAAMC,EAAU,CACZ1E,GAAImD,cACJjD,QAAQ,EACRnC,MAAOyE,EAAOzE,OAEZ4G,EAAY,CAAID,GAAJ,mBAAgBvC,EAAMK,EAAOG,cAC/C,OAAO,2BACAR,GADP,kBAEKK,EAAOG,WAAagC,IAG7B,IAAK,qBACD,IAAMC,EAAqBzC,EAAMK,EAAOG,YAAY3B,KAAI,SAAAF,GAAC,OAAIA,EAAEd,KAAOwC,EAAOxC,GAAhB,2BACtDc,GADsD,IAEzDZ,OAAQsC,EAAOtC,SACfY,KACJ,OAAO,2BACAqB,GADP,kBAEKK,EAAOG,WAAaiC,IAE7B,IAAK,oBACD,IAAMD,EAAexC,EAAMK,EAAOG,YAAY3B,KAAI,SAAAF,GAAC,OAAIA,EAAEd,KAAOwC,EAAOxC,GAAhB,2BAAyBc,GAAzB,IAA4B/C,MAAOyE,EAAOzE,QAAS+C,KAC1G,OAAO,2BACAqB,GADP,kBAEKK,EAAOG,WAAagC,IAG7B,IAAK,eACD,OAAO,2BAAIxC,GAAX,kBAAmBK,EAAOxC,GAAK,KAEnC,IAAK,kBACD,IAAIyE,EAAS,eAAOtC,GAEpB,cADOsC,EAAUjC,EAAOD,YACjBkC,EAEX,QACI,OAAOtC,IExEfF,UHoB4B,WAAgE,IAA/DE,EAA8D,uDAAtDJ,EAAcS,EAAwC,uCAC3F,OAAQA,EAAOC,MACX,IAAK,kBACD,OAAON,EAAMtB,QAAO,SAAAyC,GAAE,OAAIA,EAAGtD,KAAOwC,EAAOD,cAC/C,IAAK,eACD,IAAMsC,EAA4B,CAC9B7E,GAAIwC,EAAOxC,GAAIjC,MAAOyE,EAAOzE,MAAO8C,OAAQ,OAEhD,MAAM,GAAN,mBAAWsB,GAAX,CAAkB0C,IACtB,IAAK,yBACD,OAAO1C,EAAMnB,KAAI,SAAAsC,GAAE,OAAIA,EAAGtD,KAAOwC,EAAOD,WAAjB,2BAAkCe,GAAlC,IAAsCzC,OAAQ2B,EAAOQ,iBAAkBM,KAClG,IAAK,wBACD,OAAOnB,EAAMnB,KAAI,SAAAsC,GAAE,OAAIA,EAAGtD,KAAOwC,EAAOM,WAAjB,2BAAkCQ,GAAlC,IAAsCvF,MAAOyE,EAAOzE,QAASuF,KACxF,QACI,OAAOnB,MG/BN2C,EAAQC,YAAYR,GAMjCnH,OAAO0H,MAAQA,ECRfE,IAASC,OAAO,kBAAC,IAAD,CAAUH,MAAOA,GAAO,kBAAC,EAAD,OAA4BI,SAASC,eAAe,STkItF,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzH,GACLL,QAAQK,MAAMA,EAAM0H,c","file":"static/js/main.43411d3f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void // родительский callback\r\n    label: string\r\n}\r\n\r\nexport const AddItemForm= React.memo((props: AddItemFormPropsType)=> {\r\n    console.log('add item form')\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<string | null>(null)\r\n   /* const errorMessage = error ? <div className={'error-message'}> {error} </div> : null*/\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        error && setError(null);\r\n        if (e.key === 'Enter') {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError('Title is required!')\r\n        }\r\n        setTitle('')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={'outlined'}\r\n                       value={title}\r\n                       onChange={changeTitle}\r\n                       onKeyPress={onKeyPressAddItem}\r\n                       label={props.label}\r\n                       error={!!error}\r\n                       helperText={error}/>\r\n            <IconButton onClick={addItem} color={'primary'}>\r\n                <AddBox/>\r\n            </IconButton>\r\n            {/*{errorMessage}*/}\r\n        </div>\r\n\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport './App.css';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nconst EditableSpan= React.memo((props: EditableSpanPropsType)=>{\r\n    console.log('EditableSpan')\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onEditMode = () => {\r\n        setError(false)\r\n        setTitle(props.title)\r\n        setEditMode(true)\r\n    }\r\n\r\n    const offEditMode = () => {\r\n        const trimmedTitle = title.trim()\r\n        setEditMode(false)\r\n        if (trimmedTitle) {\r\n            props.changeTitle(title)\r\n        }\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        if (!e.currentTarget.value.trim()) {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode ? <TextField value={title}\r\n                              onChange={changeTitle}\r\n                              autoFocus\r\n                              onBlur={offEditMode}\r\n                              color={'primary'}\r\n                              variant={'standard'}\r\n            /> : <span onDoubleClick={onEditMode}> {props.title} </span>\r\n    )\r\n})\r\n\r\nexport default EditableSpan;","import React, {ChangeEvent} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport EditableSpan from \"../EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskType} from \"../App\";\r\n\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    changeTaskStatus: (id: string, newIsDoneValue: boolean)=> void\r\n    removeTask: (id: string)=> void\r\n    changeTaskTitle: (id: string, newValue: string)=> void\r\n\r\n}\r\n\r\nconst Task= React.memo(({\r\n                            task,\r\n                            changeTaskStatus,\r\n                            changeTaskTitle,\r\n                            removeTask\r\n                        }: TaskPropsType)=>{\r\n    console.log('Task')\r\n\r\n    const onClickHandler = () => removeTask(task.id)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue= e.currentTarget.checked;\r\n        changeTaskStatus(task.id, newIsDoneValue)\r\n    }\r\n    const onTitleChangeHandler =(newValue: string) => changeTaskTitle(task.id, newValue)\r\n\r\n    return (\r\n        <div key={task.id} className={task.isDone ? 'is-done' : ''}>\r\n            <Checkbox color={'primary'}\r\n                      checked={task.isDone}\r\n                      onChange={onChangeHandler}/>\r\n            <EditableSpan title={task.title} changeTitle={onTitleChangeHandler}/>\r\n            <IconButton onClick={onClickHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n            {/*<button onClick={removeTask} className={'removeButton'}>X</button>*/}\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Task;","import React, {useCallback} from \"react\";\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport './App.css';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport Task from \"./state/Task\";\r\n\r\ntype TodoListPropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeTodoListFilter: (newFilterValue: FilterValuesType, todoListId: string) => void\r\n    removeTask: (taskID: string, todoListId: string) => void\r\n    addTask: (title: string, todoListId: string) => void\r\n    todoListFilter: FilterValuesType\r\n    changeTaskStatus: (taskID: string, newIsDoneValue: boolean, todoListId: string) => void\r\n    Id: string\r\n    changeTaskTitle: (taskID: string, title: string, todoListId: string) => void\r\n    removeTodoList: (todoListId: string) => void\r\n    changeTodoListTitle: (taskID: string, todoListId: string) => void\r\n}\r\n\r\nconst TodoList= React.memo((props: TodoListPropsType)=>{\r\n    function getTasksForTodoList(): Array<TaskType> {\r\n        switch (props.todoListFilter) {\r\n            case \"active\":\r\n                return props.tasks.filter(t => !t.isDone)\r\n            case \"completed\":\r\n                return props.tasks.filter(t => t.isDone )\r\n            default:\r\n                return props.tasks\r\n        }\r\n    }\r\n\r\n    const removeTask = useCallback((id: string) => props.removeTask(id, props.Id),[props.removeTask, props.Id])\r\n    const changeTaskStatus = useCallback((id: string, newIsDoneValue: boolean) => props.changeTaskStatus(id, newIsDoneValue, props.Id),[props.changeTaskStatus, props.Id])\r\n    const changeTaskTitle =useCallback((id: string, newValue: string) => props.changeTaskTitle(id, newValue, props.Id),[ props.changeTaskTitle, props.Id])\r\n\r\n    const tasks = getTasksForTodoList().map(t => {\r\n        return (\r\n            <Task\r\n                key={t.id}\r\n                task={t}\r\n                removeTask={removeTask}\r\n                changeTaskStatus={changeTaskStatus}\r\n                changeTaskTitle={changeTaskTitle}\r\n            />\r\n        )\r\n    })\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.Id)\r\n    }, [props.addTask, props.Id])\r\n\r\n    const removeTodoList = useCallback( () => {\r\n        props.removeTodoList(props.Id)\r\n    }, [props.removeTodoList, props.Id])\r\n\r\n    const changeTodoListTitle =useCallback((title: string) => props.changeTodoListTitle(title, props.Id),[props.changeTodoListTitle, props.Id])\r\n\r\n\r\n    const setAllFilterValue = useCallback(() => props.changeTodoListFilter('all', props.Id), [props.changeTodoListFilter, props.Id])\r\n    const setActiveFilterValue = useCallback(() => props.changeTodoListFilter('active', props.Id), [props.changeTodoListFilter, props.Id])\r\n    const setCompletedFilterValue = useCallback(() => props.changeTodoListFilter('completed', props.Id), [props.changeTodoListFilter, props.Id])\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n                <IconButton onClick={removeTodoList}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm label={'Enter your task'} addItem={addTask}/>\r\n            <div style={{listStyle: 'none', padding: '0px'}}>\r\n                {tasks}\r\n            </div>\r\n            <div style={{marginTop: '5px'}}>\r\n                <Button style={{marginRight: '5px'}}\r\n                        size={'small'} color={'primary'}\r\n                        variant={props.todoListFilter === 'all' ? 'outlined' : 'contained'}\r\n                        onClick={setAllFilterValue}>All\r\n                </Button>\r\n                <Button style={{marginRight: '5px'}}\r\n                        size={'small'} color={'primary'}\r\n                        variant={props.todoListFilter === 'active' ? 'outlined' : 'contained'}\r\n                        onClick={setActiveFilterValue}>Active\r\n                </Button>\r\n                <Button size={'small'} color={'primary'}\r\n                        variant={props.todoListFilter === 'completed' ? 'outlined' : 'contained'}\r\n                        onClick={setCompletedFilterValue}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default TodoList;","import {FilterValuesType, TodoListType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\n\r\nexport type removeTodoListAT = {\r\n    type: 'REMOVE-TODOLIST'\r\n    todoListId: string\r\n}\r\nexport type addTodoListAT = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    id: string\r\n}\r\ntype changeTodoListTitleAT = {\r\n    type: 'CHANGE-TITLE-TODOLIST'\r\n    title: string\r\n    todoListID: string\r\n}\r\ntype changeTodoListFilterAT = {\r\n    type: 'CHANGE-FILTER-TODOLIST'\r\n    newFilterValue: FilterValuesType\r\n    todoListId: string\r\n}\r\n\r\nconst initialState: TodoListType[] = []\r\n\r\nexport type ActionsType = removeTodoListAT | addTodoListAT | changeTodoListTitleAT | changeTodoListFilterAT;\r\n\r\nexport const todoListsReducer = (state = initialState, action: ActionsType): TodoListType[] => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\":\r\n            return state.filter(tl => tl.id !== action.todoListId)\r\n        case \"ADD-TODOLIST\":\r\n            const newTodoList: TodoListType = {\r\n                id: action.id, title: action.title, filter: \"all\"\r\n            }\r\n            return [...state, newTodoList]\r\n        case \"CHANGE-FILTER-TODOLIST\":\r\n            return state.map(tl => tl.id === action.todoListId ? {...tl, filter: action.newFilterValue} : tl)\r\n        case \"CHANGE-TITLE-TODOLIST\":\r\n            return state.map(tl => tl.id === action.todoListID ? {...tl, title: action.title} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const RemoveTodoListAC = (id: string): removeTodoListAT => {\r\n    return {\r\n        type: \"REMOVE-TODOLIST\",\r\n        todoListId: id\r\n    }\r\n}\r\n\r\nexport const AddTodoListAC = (title: string): addTodoListAT => {\r\n    return {\r\n        type: \"ADD-TODOLIST\",\r\n        title: title,\r\n        id: v1()\r\n    }\r\n}\r\n\r\nexport const changeTodoListTitleAC = (title: string, id: string): changeTodoListTitleAT => {\r\n    return {\r\n        type: \"CHANGE-TITLE-TODOLIST\",\r\n        title: title,\r\n        todoListID: id\r\n    }\r\n}\r\n\r\nexport const changeTodoListFilterAC = (newFilterValue: FilterValuesType, id: string): changeTodoListFilterAT => {\r\n    return {\r\n        type: \"CHANGE-FILTER-TODOLIST\",\r\n        newFilterValue: newFilterValue,\r\n        todoListId: id\r\n    }\r\n}\r\n","import {TasksStateType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {addTodoListAT, removeTodoListAT} from \"./todoLists-reducer\";\r\n\r\ntype removeTaskAT = {\r\n    type: 'REMOVE-TASK'\r\n    taskId: string\r\n    todolistId: string\r\n\r\n}\r\ntype AddTaskAT = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\ntype ChangeTaskStatusAT = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    todolistId: string\r\n    id: string\r\n    isDone: boolean\r\n}\r\n\r\ntype ChangeTaskTitleAT = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    todolistId: string\r\n    title: string\r\n    id: string\r\n}\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport type ActionsType = removeTaskAT | AddTaskAT | ChangeTaskStatusAT |\r\n    ChangeTaskTitleAT | addTodoListAT | removeTodoListAT\r\n\r\nexport const tasksReducer = (state = initialState, action: ActionsType): TasksStateType => {\r\n\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\":\r\n            let copyState = {...state}\r\n            copyState[action.todolistId] = copyState[action.todolistId].filter(t => t.id !== action.taskId)\r\n\r\n            return copyState\r\n        case \"ADD-TASK\": {\r\n            const newTask = {\r\n                id: v1(),\r\n                isDone: false,\r\n                title: action.title\r\n            }\r\n            const updatedTasks = [newTask, ...state[action.todolistId]]\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: updatedTasks\r\n            }\r\n        }\r\n        case 'CHANGE-TASK-STATUS':\r\n            const updatedTasksStatus = state[action.todolistId].map(t => t.id === action.id ? {\r\n                ...t,\r\n                isDone: action.isDone\r\n            } : t)\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: updatedTasksStatus\r\n            }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            const updatedTasks = state[action.todolistId].map(t => t.id === action.id ? {...t, title: action.title} : t)\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: updatedTasks\r\n            }\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {...state, [action.id]: []}\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            let copyState = {...state}\r\n            delete copyState[action.todoListId]\r\n            return copyState\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): removeTaskAT => {\r\n    return {type: \"REMOVE-TASK\", taskId: taskId, todolistId: todolistId}\r\n}\r\n\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskAT => {\r\n    return {type: 'ADD-TASK', todolistId: todolistId, title: title}\r\n}\r\n\r\nexport const changeTaskStatusAC = (id: string, isDone: boolean, todolistId: string): ChangeTaskStatusAT => {\r\n    return {type: 'CHANGE-TASK-STATUS', todolistId: todolistId, id: id, isDone: isDone}\r\n}\r\n\r\nexport const changeTaskTitleAC = (title: string, id: string, todolistId: string): ChangeTaskTitleAT => {\r\n    return {type: 'CHANGE-TASK-TITLE', todolistId: todolistId, title: title, id: id}\r\n}\r\n\r\n\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./TodoList\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    AddTodoListAC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleAC,\r\n    RemoveTodoListAC,\r\n} from \"./state/todoLists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string;\r\n    title: string;\r\n    isDone: boolean;\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"   //ипизирование фильтра\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n    //BLL:\r\n    /* const todoListId_1 = v1();\r\n     const todoListId_2 = v1();*/\r\n\r\n\r\n    let todolists = useSelector<AppRootStateType, TodoListType[]>(\r\n        state => state.todolists)\r\n\r\n    let tasks = useSelector<AppRootStateType, TasksStateType>(\r\n        state => state.tasks)\r\n\r\n    let dispatch = useDispatch()\r\n\r\n    /* const [todoLists, dispatchTodolist] = useReducer(todoListsReducer, [\r\n         {id: todoListId_1, title: 'What to learn', filter: \"all\"},\r\n         {id: todoListId_2, title: 'What to buy', filter: \"all\"}\r\n     ])\r\n\r\n     const [tasks, dispatchToTasks] = useReducer(tasksReducer, {\r\n         [todoListId_1]: [\r\n             {id: v1(), title: \"HTML\", isDone: true},\r\n             {id: v1(), title: \"CSS\", isDone: true},\r\n             {id: v1(), title: \"React\", isDone: false}\r\n         ],\r\n         [todoListId_2]: [\r\n             {id: v1(), title: \"Milk\", isDone: true},\r\n             {id: v1(), title: \"Bread\", isDone: true}\r\n         ],\r\n     })*/\r\n\r\n\r\n    const removeTask= useCallback((taskID: string, todoListId: string)=>{\r\n        /*const updatedTasks = tasks[todoListId].filter(t => t.id !== taskID)\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListId]: updatedTasks\r\n        })*/\r\n        let action = removeTaskAC( taskID, todoListId)\r\n        dispatch(action)\r\n    },[dispatch])\r\n\r\n    const addTask=useCallback((title: string, todoListId: string)=>{\r\n        /*const newTask = {\r\n            id: v1(),\r\n            isDone: false,\r\n            title: title //из парепетра тайтл\r\n        }\r\n        const updatedTasks = [newTask, ...tasks[todoListId]]\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListId]: updatedTasks\r\n        })*/\r\n        let action = addTaskAC(title, todoListId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus= useCallback((taskID: string, newIsDoneValue: boolean, todoListId: string)=>{\r\n        /*const updatedTasks = tasks[todoListId].map(t => t.id === taskID ? {...t, isDone: newIsDoneValue} : t)\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListId]: updatedTasks\r\n        })*/\r\n        let action = changeTaskStatusAC(taskID, newIsDoneValue, todoListId)\r\n        dispatch(action)\r\n    },[dispatch])\r\n\r\n    const changeTaskTitle= useCallback((taskID: string, title: string, todoListId: string)=> {\r\n        /*const updatedTasks = tasks[todoListId].map(t => t.id === taskID ? {...t, title} : t)\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListId]: updatedTasks\r\n        })*/\r\n        let action = changeTaskTitleAC(taskID, title, todoListId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTodoListTitle= useCallback((title: string, todoListID: string)=> {\r\n        /*const updatedTodoLists = todoLists.map(tl => tl.id === todoListID ? {...tl, title} : tl)\r\n        setTodoLists(updatedTodoLists)*/\r\n        let action = changeTodoListTitleAC(title, todoListID)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTodoListFilter= useCallback((newFilterValue: FilterValuesType, todoListId: string)=> {\r\n        /*const updatedTodoList = todoLists.map(tl => tl.id === todoListId ? {...tl, filter: newFilterValue} : tl)\r\n        setTodoLists(updatedTodoList)*/\r\n        let action = changeTodoListFilterAC(newFilterValue, todoListId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const removeTodoList= useCallback((todoListId: string)=> {\r\n        /*const updatedTodoList = todoLists.filter(tl => tl.id !== todoListId)\r\n        setTodoLists(updatedTodoList);\r\n        delete tasks[todoListId] */  //удалил таски из массива, тк без этой функции они удаляются только из ui\r\n        let action = RemoveTodoListAC(todoListId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const addTodoList= useCallback((title: string)=> {\r\n        /*const newTodoListID = v1()\r\n        const newTodoList: TodoListType = {\r\n            id: newTodoListID, title, filter: \"all\"\r\n        }\r\n        setTodoLists([...todoLists, newTodoList])\r\n        setTasks({...tasks, [newTodoListID]: []})*/\r\n\r\n        let action = AddTodoListAC(title)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const todoListComponents = todolists.map((tl) => {\r\n        return (\r\n            <Grid item={true} key={tl.id}>\r\n                <Paper elevation={6} style={{padding: '20px'}}>\r\n                    <TodoList\r\n                        title={tl.title}\r\n                        tasks={tasks[tl.id]}\r\n                        removeTask={removeTask}\r\n                        changeTodoListFilter={changeTodoListFilter}\r\n                        addTask={addTask}\r\n                        todoListFilter={tl.filter}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        Id={tl.id}\r\n                        removeTodoList={removeTodoList}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>)\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoLists\r\n                    </Typography>\r\n                    <Button variant={'outlined'} color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container={true} style={{padding: '20px 0px'}}>\r\n                    <AddItemForm label={'Enter the todoList title'} addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container={true} spacing={5}>\r\n                    {todoListComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\nimport {todoListsReducer} from \"./todoLists-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todoListsReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>  //тип стейта\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(<Provider store={store}><AppWithRedux/></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}