{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","onClick","color","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","changeTitle","onDoubleClick","TodoList","tasks","map","t","id","className","isDone","Checkbox","checked","changeTaskStatus","Id","changeTaskTitle","removeTask","Delete","changeTodoListTitle","removeTodoList","addTask","style","listStyle","padding","Button","marginRight","size","todoListFilter","changeTodoListFilter","App","todoListId_1","v1","todoListId_2","filter","todoLists","setTodoLists","setTasks","todoListId","updatedTodoList","tl","taskID","updatedTasks","newIsDoneValue","todoListID","updatedTodoLists","newFilterValue","getTasksForTodoList","todoList","todoListComponents","Grid","item","Paper","elevation","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","container","newTodoListID","newTodoList","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.2373e05e.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void // родительский callback\r\n    label: string\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<string | null>(null)\r\n   /* const errorMessage = error ? <div className={'error-message'}> {error} </div> : null*/\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError('Title is required!')\r\n        }\r\n        setTitle('')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={'outlined'}\r\n                       value={title}\r\n                       onChange={changeTitle}\r\n                       onKeyPress={onKeyPressAddItem}\r\n                       label={props.label}\r\n                       error={!!error}\r\n                       helperText={error}/>\r\n            <IconButton onClick={addItem} color={'primary'}>\r\n                <AddBox/>\r\n            </IconButton>\r\n            {/*{errorMessage}*/}\r\n        </div>\r\n\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport './App.css';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nfunction EditableSpan(props: EditableSpanPropsType) {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onEditMode = () => {\r\n        setError(false)\r\n        setTitle(props.title)\r\n        setEditMode(true)\r\n    }\r\n\r\n    const offEditMode = () => {\r\n        const trimmedTitle = title.trim()\r\n        setEditMode(false)\r\n        if (trimmedTitle) {\r\n            props.changeTitle(title)\r\n        }\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        if (!e.currentTarget.value.trim()) {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode ? <TextField value={title}\r\n                              onChange={changeTitle}\r\n                              autoFocus\r\n                              onBlur={offEditMode}\r\n                              color={'primary'}\r\n                              variant={'standard'}\r\n            /> : <span onDoubleClick={onEditMode}> {props.title} </span>\r\n    )\r\n}\r\n\r\nexport default EditableSpan;","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport './App.css';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from '@material-ui/core';\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype TodoListPropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeTodoListFilter: (newFilterValue: FilterValuesType, todoListId: string) => void\r\n    removeTask: (taskID: string, todoListId: string) => void\r\n    addTask: (title: string, todoListId: string) => void\r\n    todoListFilter: FilterValuesType\r\n    changeTaskStatus: (taskID: string, newIsDoneValue: boolean, todoListId: string) => void\r\n    Id: string\r\n    changeTaskTitle: (taskID: string, title: string, todoListId: string) => void\r\n    removeTodoList: (todoListId: string) => void\r\n    changeTodoListTitle: (taskID: string, todoListId: string) => void\r\n}\r\n\r\nfunction TodoList(props: TodoListPropsType) {\r\n\r\n    const tasks = props.tasks.map(t => {\r\n        const removeTask = () => props.removeTask(t.id, props.Id)\r\n        const changeStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(t.id, e.currentTarget.checked, props.Id)\r\n        const changeTaskTitle = (title: string) => props.changeTaskTitle(t.id, title, props.Id)\r\n        return (\r\n            <li key={t.id} className={t.isDone ? 'is-done' : ''}>\r\n\r\n                <Checkbox color={'primary'}\r\n                          checked={t.isDone}\r\n                          onChange={changeStatus}/>\r\n                <EditableSpan title={t.title} changeTitle={changeTaskTitle}/>\r\n                <IconButton onClick={removeTask}>\r\n                    <Delete/>\r\n                </IconButton>\r\n                {/*<button onClick={removeTask} className={'removeButton'}>X</button>*/}\r\n\r\n            </li>\r\n        )\r\n    })\r\n\r\n    const setAllFilterValue = () => props.changeTodoListFilter('all', props.Id)\r\n    const setActiveFilterValue = () => props.changeTodoListFilter('active', props.Id)\r\n    const setCompletedFilterValue = () => props.changeTodoListFilter('completed', props.Id)\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.Id)\r\n    }\r\n    const removeTodoList = () => {\r\n        props.removeTodoList(props.Id)\r\n    }\r\n    const changeTodoListTitle = (title: string) => props.changeTodoListTitle(title, props.Id)\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n                <IconButton onClick={removeTodoList}>\r\n                    <Delete/>\r\n                </IconButton>\r\n                {/*<button onClick={removeTodoList}>X</button>*/}\r\n            </h3>\r\n            <AddItemForm label={'Enter your task'} addItem={addTask}/>\r\n            <ul style={{listStyle: 'none', padding: '0px'}}>\r\n                {tasks}\r\n            </ul>\r\n            <div>\r\n                <Button style={{marginRight: '5px'}}\r\n                        size={'small'} color={'primary'}\r\n                        variant={props.todoListFilter === 'all' ? 'outlined' : 'contained'}\r\n                        onClick={setAllFilterValue}>All\r\n                </Button>\r\n                <Button style={{marginRight: '5px'}}\r\n                        size={'small'} color={'primary'}\r\n                        variant={props.todoListFilter === 'active' ? 'outlined' : 'contained'}\r\n                        onClick={setActiveFilterValue}>Active\r\n                </Button>\r\n                <Button size={'small'} color={'primary'}\r\n                        variant={props.todoListFilter === 'completed' ? 'outlined' : 'contained'}\r\n                        onClick={setCompletedFilterValue}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type TaskType = {\r\n    id: string;\r\n    title: string;\r\n    isDone: boolean;\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"   //ипизирование фильтра\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    //BLL:\r\n    const todoListId_1 = v1();\r\n    const todoListId_2 = v1();\r\n\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListId_1, title: 'What to learn', filter: \"all\"},\r\n        {id: todoListId_2, title: 'What to buy', filter: \"all\"},\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListId_1]: [\r\n            {id: v1(), title: \"HTML\", isDone: true},\r\n            {id: v1(), title: \"CSS\", isDone: true},\r\n            {id: v1(), title: \"React\", isDone: false}\r\n        ],\r\n        [todoListId_2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"Bread\", isDone: true}\r\n        ],\r\n    })\r\n\r\n    function removeTodoList(todoListId: string) {\r\n        const updatedTodoList = todoLists.filter(tl => tl.id !== todoListId)\r\n        setTodoLists(updatedTodoList);\r\n        delete tasks[todoListId]   //удалил таски из массива, тк без этой функции они удаляются только из ui\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        const newTodoListID = v1()\r\n        const newTodoList: TodoListType = {\r\n            id: newTodoListID, title, filter: \"all\"\r\n        }\r\n        setTodoLists([...todoLists, newTodoList])\r\n        setTasks({...tasks, [newTodoListID]: []})\r\n    }\r\n\r\n    function removeTask(taskID: string, todoListId: string) {\r\n        const updatedTasks = tasks[todoListId].filter(t => t.id !== taskID)\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListId]: updatedTasks\r\n        })\r\n    }\r\n\r\n    function addTask(title: string, todoListId: string) {\r\n        const newTask = {\r\n            id: v1(),\r\n            isDone: false,\r\n            title: title //из парепетра тайтл\r\n        }\r\n        const updatedTasks = [newTask, ...tasks[todoListId]]\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListId]: updatedTasks\r\n        })\r\n    }\r\n\r\n    function changeTaskStatus(taskID: string, newIsDoneValue: boolean, todoListId: string) {\r\n        const updatedTasks = tasks[todoListId].map(t => t.id === taskID ? {...t, isDone: newIsDoneValue} : t)\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListId]: updatedTasks\r\n        })\r\n    }\r\n\r\n    function changeTaskTitle(taskID: string, title: string, todoListId: string) {\r\n        const updatedTasks = tasks[todoListId].map(t => t.id === taskID ? {...t, title} : t)\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListId]: updatedTasks\r\n        })\r\n    }\r\n\r\n\r\n    function changeTodoListTitle(title: string, todoListID: string) {\r\n        const updatedTodoLists = todoLists.map(tl => tl.id === todoListID ? {...tl, title} : tl)\r\n        setTodoLists(updatedTodoLists)\r\n    }\r\n\r\n    function changeTodoListFilter(newFilterValue: FilterValuesType, todoListId: string) {\r\n        const updatedTodoList = todoLists.map(tl => tl.id === todoListId ? {...tl, filter: newFilterValue} : tl)\r\n        setTodoLists(updatedTodoList)\r\n    }\r\n\r\n    function getTasksForTodoList(todoList: TodoListType): Array<TaskType> /*типизируем что мы вернем*/ {\r\n        switch (todoList.filter) {\r\n            case \"active\":\r\n                return tasks[todoList.id].filter(t => t.isDone === false)\r\n            case \"completed\":\r\n                return tasks[todoList.id].filter(t => t.isDone === true)\r\n            default:\r\n                return tasks[todoList.id]\r\n        }\r\n    }\r\n\r\n    const todoListComponents = todoLists.map((tl) => {\r\n        return (\r\n            <Grid item={true} key={tl.id}>\r\n            <Paper elevation={6} style={{padding: '20px'}}>\r\n                <TodoList\r\n                    title={tl.title}\r\n                    tasks={getTasksForTodoList(tl)}\r\n                    removeTask={removeTask}\r\n                    changeTodoListFilter={changeTodoListFilter}\r\n                    addTask={addTask}\r\n                    todoListFilter={tl.filter}\r\n                    changeTaskStatus={changeTaskStatus}\r\n                    Id={tl.id}\r\n                    removeTodoList={removeTodoList}\r\n                    changeTodoListTitle={changeTodoListTitle}\r\n                    changeTaskTitle={changeTaskTitle}\r\n\r\n                />\r\n            </Paper>\r\n            </Grid>)\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoLists\r\n                    </Typography>\r\n                    <Button variant={'outlined'} color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container={true} style={{padding: '20px 0px'}}>\r\n                    <AddItemForm label={'Enter the todoList title'} addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container={true} spacing={5}>\r\n                    {todoListComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}