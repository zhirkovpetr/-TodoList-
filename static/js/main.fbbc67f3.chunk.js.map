{"version":3,"sources":["api/todolists-api.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","state/tasks-reducer.ts","Todolist.tsx","state/todolists-reducer.ts","App.tsx","reportWebVitals.ts","state/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","id","delete","put","todolistId","taskId","taskTitle","model","Task","onClickHandler","useCallback","removeTask","task","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","status","Checkbox","Delete","initialState","Todolist","dispatch","useDispatch","useEffect","then","res","tasks","type","SetTasksAC","data","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","t","removeTodolist","map","style","paddingTop","Button","AddTodolistThunkCreator","v1","addTodolistAC","item","App","getState","todos","todolists","useSelector","state","removeTaskAC","TasksDeleteThunkCreator","addTaskAC","TasksAddThunkCreator","changeStatus","updatedTask","find","deadline","description","priority","startDate","newTask","changeTaskStatusAC","todoListId","TasksUpdateStatusThunkCreator","newTitle","changeTaskTitleAC","UpdateTaskTitleThunkCreator","action","removeTodolistAC","changeTodolistTitleAC","UpdateTodolistTitleThunkCreator","addTodolist","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","stateCopy","forEach","newTasks","todolistTasks","newTasksArray","copyState","addedDate","order","todolist","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fbbc67f3.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'abbdd15d-25c5-489b-bf41-880fe8431dc9'\r\n    }\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitle: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitle});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import {TasksStateType} from '../App';\r\nimport {AddTodolistActionType, RemoveTodolistActionType, SetTodosActionType} from './todolists-reducer';\r\nimport {TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    task: TaskType\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId: string\r\n    taskId: string\r\n    status: TaskStatuses\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodosActionType\r\n    | SetTasksActionType\r\n\r\nconst initialState: TasksStateType = {\r\n    /*\"todolistId1\": [\r\n        { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"JS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"React\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ],\r\n    \"todolistId2\": [\r\n        { id: \"1\", title: \"bread\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"milk\", status: TaskStatuses.Completed, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"tea\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ]*/\r\n\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'SET_TASKS': {\r\n            const stateCopy = {...state};\r\n            stateCopy[action.todolistId] = action.tasks\r\n            return stateCopy\r\n        }\r\n        case \"SET_TODOLISTS\": {\r\n            const stateCopy = {...state};\r\n            action.todos.forEach(tl => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id !== action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.task.todoListId];\r\n            const newTasks = [action.task, ...tasks];\r\n            stateCopy[action.task.todoListId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, status: action.status} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            // найдём нужную таску:\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, title: action.title} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\nexport const addTaskAC = (task: TaskType): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', task}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', status, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\r\n}\r\n\r\nexport const SetTasksAC = (tasks: Array<TaskType>, todolistId: string) => {\r\n    return {type: 'SET_TASKS', tasks, todolistId} as const\r\n}\r\n\r\nexport type SetTasksActionType = ReturnType<typeof SetTasksAC>\r\n\r\n//Thank\r\nexport const fetchTasksThunkCreator = (todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            dispatch(SetTasksAC(res.data.items, todolistId))\r\n        })\r\n}\r\n\r\nexport const TasksDeleteThunkCreator = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTask(taskId, todolistId)\r\n        .then((res) => {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n        })\r\n}\r\n\r\nexport const TasksAddThunkCreator = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then((res) => {\r\n            let task = res.data.data.item\r\n            dispatch(addTaskAC(task))\r\n        })\r\n}\r\n\r\nexport const TasksUpdateStatusThunkCreator = (taskId: string, status: TaskStatuses, todolistId: string) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n    let state = getState()\r\n\r\n    const allTasks = state.tasks;\r\n    const tasksForCurrentTodo = allTasks[todolistId]\r\n    let updatedTask = tasksForCurrentTodo.find(task => task.id === taskId)\r\n\r\n    if (updatedTask) {\r\n        /* const model= {...updatedTask, status: status} // передаются лишние данные на бэкэнд*/\r\n        const model: UpdateTaskModelType = {\r\n            title: updatedTask.title,\r\n            status: status,\r\n            deadline: updatedTask.deadline,\r\n            description: updatedTask.description,\r\n            priority: updatedTask.priority,\r\n            startDate: updatedTask.startDate\r\n        }\r\n        todolistsAPI.updateTask(todolistId, taskId, model)\r\n            .then((res) => {\r\n                const newTask = res.data.data.item\r\n                dispatch(changeTaskStatusAC(newTask.id, newTask.status, newTask.todoListId))\r\n            })\r\n    }\r\n}\r\n\r\nexport const UpdateTaskTitleThunkCreator = (taskId: string, title: string, todolistId: string) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n    let state = getState()\r\n\r\n    const allTasks = state.tasks;\r\n    const tasksForCurrentTodo = allTasks[todolistId]\r\n    let updatedTask = tasksForCurrentTodo.find(task => task.id === taskId)\r\n\r\n    if (updatedTask) {\r\n        /* const model= {...updatedTask, status: status} // передаются лишние данные на бэкэнд*/\r\n        const model: UpdateTaskModelType = {\r\n            title: title,\r\n            status: updatedTask.status,\r\n            deadline: updatedTask.deadline,\r\n            description: updatedTask.description,\r\n            priority: updatedTask.priority,\r\n            startDate: updatedTask.startDate\r\n        }\r\n        todolistsAPI.updateTask(todolistId, taskId, model)\r\n            .then((res) => {\r\n                const newTask = res.data.data.item\r\n                dispatch(changeTaskTitleAC(newTask.id, newTask.title, newTask.todoListId))\r\n            })\r\n    }\r\n}","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task'\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\nimport {FilterValuesType} from './state/todolists-reducer'\r\nimport {fetchTasksThunkCreator} from \"./state/tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(()=>{\r\n        dispatch(fetchTasksThunkCreator(props.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                          removeTask={props.removeTask}\r\n                                          changeTaskTitle={props.changeTaskTitle}\r\n                                          changeTaskStatus={props.changeTaskStatus}\r\n                    />)\r\n            }\r\n        </div>\r\n\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {v1} from 'uuid';\r\nimport {todolistsAPI, TodolistType} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | SetTodosActionType\r\n\r\nconst initialState: Array<TodolistDomainType> = [\r\n    /*{id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0},\r\n    {id: todolistId2, title: 'What to buy', filter: 'all', addedDate: '', order: 0}*/\r\n]\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all',\r\n                addedDate: '',\r\n                order: 0\r\n            }, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'SET_TODOLISTS': {\r\n            return action.todos.map(tl => {\r\n                return {...tl, filter: 'all'}\r\n            })\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\nexport const setTodosAC = (todos: Array<TodolistType>) => {\r\n    return {type: 'SET_TODOLISTS', todos} as const\r\n}\r\n\r\nexport type SetTodosActionType = ReturnType<typeof setTodosAC>\r\n\r\n//Thank\r\nexport const fetchTodosThunkCreator = () => (dispatch: Dispatch, getState: () => AppRootStateType): void => {\r\n    // 1.side effects\r\n    todolistsAPI.getTodolists().then((res) => {\r\n        // 2. dispatch(action)\r\n        dispatch(setTodosAC(res.data))\r\n    })\r\n}\r\n\r\nexport const AddTodolistThunkCreator = (title: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.createTodolist(title)\r\n        .then((res) => {\r\n            dispatch(addTodolistAC(res.data.data.item.title))\r\n        })\r\n}\r\n\r\nexport const DeleteTodolistThunkCreator = (todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n        .then((res) => {\r\n            dispatch(removeTodolistAC(todolistId))\r\n        })\r\n}\r\n\r\nexport const UpdateTodolistTitleThunkCreator = (id: string, title: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.updateTodolist(id, title)\r\n        .then((res) => {\r\n            dispatch(changeTodolistTitleAC(id, title))\r\n        })\r\n}\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    AddTodolistThunkCreator,\r\n    changeTodolistFilterAC,\r\n    DeleteTodolistThunkCreator,\r\n    fetchTodosThunkCreator,\r\n    FilterValuesType,\r\n    TodolistDomainType,\r\n    UpdateTodolistTitleThunkCreator\r\n} from './state/todolists-reducer'\r\nimport {\r\n    TasksAddThunkCreator,\r\n    TasksDeleteThunkCreator,\r\n    TasksUpdateStatusThunkCreator,\r\n    UpdateTaskTitleThunkCreator\r\n} from './state/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n    useEffect(()=>{\r\n        dispatch(fetchTodosThunkCreator())\r\n        /*todolistsAPI.getTodolists()\r\n            .then((res)=>{\r\n                dispatch(setTodosAC(res.data))\r\n            })*/\r\n    }, [])\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        dispatch(TasksDeleteThunkCreator(id, todolistId))\r\n        /*const action = removeTaskAC(id, todolistId);\r\n        dispatch(action);*/\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        debugger\r\n        dispatch(TasksAddThunkCreator(todolistId, title))\r\n        /*const action = addTaskAC(title, todolistId);\r\n        dispatch(action);*/\r\n    }, []);\r\n\r\n\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(TasksUpdateStatusThunkCreator(id, status, todolistId))\r\n        /*const action = changeTaskStatusAC(id, status, todolistId);\r\n        dispatch(action);*/\r\n    }, []);\r\n\r\n\r\n\r\n\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        dispatch(UpdateTaskTitleThunkCreator(id, newTitle, todolistId))\r\n       /* const action = changeTaskTitleAC(id, newTitle, todolistId);\r\n        dispatch(action);*/\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        dispatch(DeleteTodolistThunkCreator(id))\r\n        /*const action = removeTodolistAC(id);\r\n        dispatch(action);*/\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        dispatch(UpdateTodolistTitleThunkCreator(id, title))\r\n        /*const action = changeTodolistTitleAC(id, title);\r\n        dispatch(action);*/\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(AddTodolistThunkCreator(title))\r\n        /*const action = addTodolistAC(title);\r\n        dispatch(action);*/\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk'\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './state/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}