{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","setIsInitializedAC","appReducer","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","todolistsReducer","removeTaskAC","tasks","t","addTaskAC","task","todoListId","updateTaskAC","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","domainModel","getState","find","apiModel","deadline","description","priority","startDate","res","resultCode","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","auth","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","FormControl","FormLabel","href","target","handleSubmit","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","App","finally","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.1e86954e.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'abbdd15d-25c5-489b-bf41-880fe8431dc9'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(taskId: string, model: UpdateTaskModelType, todolistId: string) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{userId: number}>>(`auth/login`, data);\r\n        return promise;\r\n    },\r\n    me(){\r\n        const promise = instance.get<ResponseType<AuthMeType>>(`auth/me`)\r\n        return promise\r\n    },\r\n    logout(){\r\n        const promise = instance.delete<ResponseType>(`auth/login`);\r\n        return promise\r\n    }\r\n}\r\n\r\n\r\n// types\r\n\r\nexport type AuthMeType= {\r\n    id: number;\r\n    email: string;\r\n    login: string;\r\n\r\n}\r\nexport type LoginParamsType={\r\n    email: string;\r\n    password: string;\r\n    rememberMe: boolean;\r\n    captcha?: boolean;\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice= createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC (state, action: PayloadAction<{value: boolean}>) {\r\n            state.isLoggedIn= action.payload.value}\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\n\r\nexport const setIsLoggedInAC= slice.actions.setIsLoggedInAC\r\n\r\n\r\n/*type InitialStateType = typeof initialState*/\r\n\r\n/*export const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}*/\r\n/*// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)*/\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(data)\r\n        .then((res)=> {\r\n            if(res.data.resultCode === 0){\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error)=>{\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authAPI.logout()\r\n        .then((res)=> {\r\n            if(res.data.resultCode === 0){\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error)=>{\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n}\r\n\r\n/*// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType*/\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState= {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false,\r\n}\r\n\r\nconst slice= createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC (state, action: PayloadAction<{status: RequestStatusType}>) {state.status= action.payload.status},\r\n        setAppErrorAC (state, action: PayloadAction<{error: string | null}>) {state.error= action.payload.error},\r\n        setIsInitializedAC (state, action: PayloadAction<{isInitialized: boolean}>) {state.isInitialized= action.payload.isInitialized},\r\n    }\r\n})\r\n\r\nexport const appReducer= slice.reducer;\r\n\r\nexport const setAppErrorAC= slice.actions.setAppErrorAC\r\nexport const setAppStatusAC= slice.actions.setAppStatusAC\r\nexport const setIsInitializedAC= slice.actions.setIsInitializedAC\r\n\r\n/*export const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case'APP/SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return {...state}\r\n    }\r\n}*/\r\n\r\n\r\n/*export type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}*/\r\n\r\n/*export const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setIsInitializedAC = (isInitialized: boolean) => ({type: 'APP/SET-IS-INITIALIZED', isInitialized} as const)*/\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type setIsInitializedActionType = ReturnType<typeof setIsInitializedAC>\r\n\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}));\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setIsInitializedAC({isInitialized: true}))\r\n        })\r\n}\r\n\r\n\r\n/*type ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | setIsInitializedActionType*/\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = [] as Array<TodolistDomainType>\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state[index].title = action.payload.title\r\n            }\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state[index].filter = action.payload.filter\r\n            }\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state[index].entityStatus= action.payload.status\r\n            }\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        },\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\n\r\nexport const removeTodolistAC = slice.actions.removeTodolistAC\r\nexport const addTodolistAC = slice.actions.addTodolistAC\r\nexport const changeTodolistTitleAC = slice.actions.changeTodolistTitleAC\r\nexport const changeTodolistFilterAC = slice.actions.changeTodolistFilterAC\r\nexport const changeTodolistEntityStatusAC = slice.actions.changeTodolistEntityStatusAC\r\nexport const setTodolistsAC = slice.actions.setTodolistsAC\r\n\r\n\r\n/*export const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}*/\r\n\r\n/*// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)*/\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({id: todolistId}))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({id: id, title: title}))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\n/*type ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>*/\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n/*\r\ntype ThunkDispatch = Dispatch<SetAppStatusActionType | SetAppErrorActionType>*/\r\n","import {addTodolistAC, removeTodolistAC, setTodolistsAC} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {} as TasksStateType\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n        setTasksAC(state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.id]\r\n        });\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach((tl: any) => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n        /*[addTodolistAC.type]: (state, action: PayloadAction<{}>)=> {},\r\n        [removeTodolistAC.type]: (state, action: PayloadAction<{}>)=> {},\r\n        [setTodolistsAC.type]: (state, action: PayloadAction<{}>)=> {}*/\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\nexport const removeTaskAC = slice.actions.removeTaskAC\r\nexport const addTaskAC = slice.actions.addTaskAC\r\nexport const updateTaskAC = slice.actions.updateTaskAC\r\nexport const setTasksAC = slice.actions.setTasksAC\r\n\r\n\r\n/*export const tasksReducer = (state: TasksStateType = initialState, action: any): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId].filter(t => t.id != action.payload.taskId)\r\n            }\r\n        case 'ADD-TASK':\r\n            return {...state, [action.payload.task.todoListId]: [action.task, ...state[action.payload.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId]\r\n                    .map(t => t.id === action.payload.taskId ? {...t, ...action.payload.model} : t)\r\n            }\r\n        case addTodolistAC.type:\r\n            return {...state, [action.payload.todolist.id]: []}\r\n        case removeTodolistAC.type:\r\n            const copyState = {...state}\r\n            delete copyState[action.payload.id]\r\n            return copyState\r\n        case setTodolistsAC.type: {\r\n            const copyState = {...state}\r\n            action.payload.todolists.forEach((tl: any) => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}*/\r\n\r\n/*\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', taskId, model, todolistId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)*/\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC({tasks, todolistId}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC({taskId, todolistId})\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC({task})\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(taskId, apiModel, todolistId)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC({taskId, model: domainModel, todolistId})\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n/*type ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>*/\r\n\r\n/*type ThunkDispatch = Dispatch<SetAppStatusActionType | SetAppErrorActionType>*/\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn= useSelector<AppRootStateType, boolean>(state=> state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n\r\n    if(!isLoggedIn){\r\n        return (<Redirect to={'/login'}/>)\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error: null}));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch= useDispatch()\r\n    const isLoggedIn= useSelector<AppRootStateType, boolean>(state=> state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is required\\n';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Must be more than 3 characters';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    if(isLoggedIn){\r\n       return  (\r\n           <Redirect to={'/'}/>\r\n       )\r\n    }\r\n\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}>here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            /*name={'email'}\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            value={formik.values.email}*/\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            /*name={'password'}\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            value={formik.values.password}*/\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                /*name={'rememberMe'}\r\n                                onChange={formik.handleChange}\r\n                                checked={formik.values.rememberMe}*/\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {AppBar, Button, CircularProgress, Container, IconButton, LinearProgress, Toolbar, Typography} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Redirect, Route, Switch} from 'react-router-dom'\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn= useSelector<AppRootStateType, boolean>(state=> state.auth.isLoggedIn)\r\n\r\n    const dispatch= useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler=()=>{\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Logout</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/todolist'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route exact path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={()=> <h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n// непосредственно создаём store\r\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport const store= configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware=> getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n//Dispatch\r\nexport type AppDispatch = typeof store.dispatch\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n        <Provider store={store}>\n            <BrowserRouter>\n                <App/>\n            </BrowserRouter>\n        </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}